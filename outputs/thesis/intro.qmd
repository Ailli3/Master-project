# Introduction {#sec-intro}
Experiments play a vital role in scientific research by helping to establish causal relationships between variables.To achieve accurate and reliable results in a comparative experiment, careful experimental design is essential. In this thesis, we formally define an experimental design as given in @def-exp.

::: {#def-exp}

## Design

A comparative experiment is an experimental study involving a set of experimental units, denoted as $\Omega$, and a set of treatments, denoted as $\mathcal{T}$. The experimental design is defined as a surjective function $D: \Omega \rightarrow \mathcal{T}$. The sizes of $\Omega$ and $\mathcal{T}$ are denoted as $N$ and $n_t$, respectively. We use $V_{\Omega} := \mathbb{R}^N$ and $V_{\mathcal{T}}$ to denote the vector spaces of $\Omega$ and $\mathcal{T}$, respectively.

:::


In conducting an experiment, a proper design of experiment is crucial for ensuring accurate and reliable results. A row-column design is a particular type of experimental design where the experimental unit is defined by the combination of two orthogonal factors, typically arranged in rows and columns. The row-column experimental structure is common in many biological applications, e.g. 96-well plates and crop field trials. The treatments of interest are then randomly allocated with certain constraints as not to confound the treatments with nuisance factors.See @def-rowcol for a formal definition of a row-column design. Note that rows and columns do not have to correspond to actual physical dimensions.

Generally, a row-column design can be defined as

::: {#def-rowcol}

## Row-column design

A row-column design refers to an experiment where experimental units are defined by the Cartesian product of two sets with sizes $n_r$ and $n_c$, denoted as $\mathcal{R}$ and $\mathcal{C}$, respectively, such that $\Omega = \mathcal{R} \times \mathcal{C}$. We denote $F_R$ and $F_C$ as the surjective functions that map $\Omega$ to $\mathcal{R}$ and $\mathcal{C}$, respectively. We use $V_R$ and $V_C$ to denote vector spaces in $\mathbb{R}^N$ for row and column factors, respectively.

:::


In a row-column design, the row and column factors are often considered as nuisance (or blocking) factors. The treatments of interest are then randomly allocated with certain constraints as to reduce confounding the treatment factors with these nuisance factors. An example of row-column design is the _Latin square design_ where $n_r = n_c = n_t$ and each treatment appears exactly once in each row and column (see @exm-lsd). 

::: {#exm-lsd}

## A $3 \times 3$ Latin square design

In a $3 \times 3$ Latin square design, we let $n_t = n_c = n_r = 3$ and the resulting random instance of a design is as shown in @fig-lsd with its corresponding design elements shown in @tbl-lsd.

```{r fig-lsd}
#| message: false
#| echo: false
#| fig-width: 5
#| fig-height: 3
#| fig-cap: "A $3 \\times 3$ Latin square design."
library(tidyverse)
lsd3 <- tibble(
  row = rep(1:3, each = 3),
  col = rep(1:3, 3),
  treatment = c(1, 2, 3, 2, 3, 1, 3, 1, 2)
) |> 
  mutate(across(everything(), as.factor))
lsd3 |> 
  ggplot(aes(col, row, fill = treatment)) +
  geom_tile(color = "black", linewidth = 1.4) +
  theme_minimal(base_size = 18) +
  labs(x = "Column", y = "Row", fill = "Treatment") +
  coord_equal()
```

```{r tbl-lsd}
#| echo: false
#| tbl-cap: "The design elements of @fig-lsd with $\\Omega$ and $T$ as defined in @def-exp and $F_R$ and $F_C$ as defined in @def-rowcol. The $n=9$-vectors $\\boldsymbol{x}_{R_i}$ for $i = 1, 2, 3$, $\\boldsymbol{x}_{C_j}$  for $j = 1, 2, 3$ and $\\boldsymbol{x}_{T_k}$ for $k = 1, 2, 3$ are the orthonormal basis of $V_R$, $V_C$ and $V_T$, respectively."
lsd3 |> 
  mutate(unit = 1:n(), .before = row) |>
  bind_cols(model.matrix(~ row - 1, data = lsd3)) |>
  bind_cols(model.matrix(~ col - 1, data = lsd3)) |>
  bind_cols(model.matrix(~ treatment - 1, data = lsd3)) |> 
  knitr::kable(col.names = c("$\\omega \\in \\Omega$", "$F_R(\\omega)$", "$F_C(\\omega)$", "$T(\\omega)$", "$\\boldsymbol{x}_{R_1}$", "$\\boldsymbol{x}_{R_2}$", "$\\boldsymbol{x}_{R_3}$", "$\\boldsymbol{x}_{C_1}$", "$\\boldsymbol{x}_{C_2}$", "$\\boldsymbol{x}_{C_3}$", "$\\boldsymbol{x}_{T_1}$", "$\\boldsymbol{x}_{T_2}$", "$\\boldsymbol{x}_{T_3}$")) 
```

:::
@tbl-lsd shows how we use a binary method to distinguish between rows, columns, and types of treatments. For row-column designs, we typically use a design matrix to model the arrangement of treatments.

::: {#def-design-matrix}
A design matrix $\boldsymbol{X}$ is a matrix that represents the arrangement of experimental units across different treatments in an experimental design. Each row corresponds to an experimental unit, and each column corresponds a treatment level.
:::

The last three columns of the @tbl-lsd above can be viewed as the design matrix for @exm-lsd, which we will discuss it in detail in the @sec-methods.

In this thesis, the observational unit and experimental unit are considered the same, thus the response of interest for the $\omega \in \Omega$ is a random variable denoted as $Y_\omega$ and its observed value (after the experiment) denoted as $y_\omega$. We use $\boldsymbol{y} = (y_1, \ldots, y_n)^\top$ to denote the vector of responses and use this interchangeably to denote a vector of random variable as well. In its simplest form, we assume that the response can be decomposed to the treatment and nuisance factors by assuming a linear model,

$$Y_\omega = \tau_{T(\omega)} + e_\omega,$$ {#eq-lm}

where $\tau_{T(\omega)}$ is a constant value with respect to the treatment received for $\omega$ (referred to as the _average treatment effects_) and $e_\omega$ is a random variable associated with the remaining contribution from $\omega$. @eq-lm assumes an additive structure which is fundamental in estimating the average treatment effect -- if this assumption does not hold to a large extent, there is little point in conducting the experiment. 

Different treatments usually have varying effects on the experimental outcomes, known as treatment effects. The goal of our experimental design is to more accurately measure and estimate the impact of different treatments on the experimental results, i.e., the treatment effects. To offer precise estimation of treatment effects,  one way is to seek the optimal value of some statistic criteria, for example, A-criteria, minimizing the variance of elementary treatment contrasts. @butler2013optimal has show the relation between optimizing design and minimizing the value of A-criteria, and show some possible algorithms to search optimal design in feasible set. These algorithms mainly focus on comparing the arrangements of different treatments, that is, doing permutations, and calculating their A values, optimizing design by iterations.

However, some undesired cluster of replications or some treatment may occur when algorithm are doing permutations along rows and columns. In an experimental design, a treatment usually has multiple replications. Specifically, clustering can refer to multiple replications of the same treatment being grouped together, or different treatmentsâ€™ replications frequently being grouped together in the experimental design see an example in @fig-NBED. @piepho2018neighbor found that such clustering is considered undesirable by experimenters who worry that irregular environmental gradients might negatively impact multiple replications of the same treatment, potentially leading to biased treatment effect estimates. Williams emphasis that there is a need to design a strategy to avoid clustering and achieve even distribution of treatment replications among the experimental field. Two properties of design are introduced. Evenness of distribution of treatment replications, abbreviated as ED, and neighbour balance, abbreviated as NB. Evenness of distribution represents how multiple replications of a treatment are evenly spread across the design field, rather than being placed close to each other. Neighbour balance, on the other hand, indicates that multiple treatments are not consistently placed next to each other in the design, promoting a more diverse adjacency relationship between treatments. A good ED ensures every replications of a treatment are widely spread in experimental field, and NB helps to avoid replications of the some treatment cluster together repeatedly. Williams introduce a scoring system to analysis ED and NB for a specific design, and introduce a algorithm to optimize ED, NB and some average efficiency factor can be represented by a specific statistic criteria.


```{r fig-NBED}
#| message: false
#| echo: false
#| warning: false
#| fig-width: 8
#| fig-height: 8
#| fig-cap: "Above, the figure presents an example of clustering: multiple replications of treatment 8 are grouped together, while treatments 1 and 19 are always adjacent to each other."
library(dplyr)
library(ggplot2)

design_df <- expand.grid(row = 1:10, col = 1:10)
set.seed(123)

design_df$treatment <- sample(1:20, size = nrow(design_df), replace = TRUE)  

design_df$treatment[c(33, 34, 43, 44)] <- 8  


design_df$treatment[c(12, 13, 22)] <- 1 
design_df$treatment[c(14, 15, 23)] <- 19 


ggplot(design_df, aes(x = col, y = row)) +
  geom_tile(aes(fill = factor(treatment)), color = "black", size = 0.5) +
  geom_text(aes(label = treatment), color = "black", size = 4) +  
  scale_fill_manual(values = c("8" = "#A1CAF1",   
                               "1" = "#B0E57C",   
                               "19" = "#D8BFD8",  
                               "2" = "white", "3" = "white", "4" = "white", 
                               "5" = "white", "6" = "white", "7" = "white", 
                               "9" = "white", "10" = "white", "11" = "white", 
                               "12" = "white", "13" = "white", "14" = "white", 
                               "15" = "white", "16" = "white", "17" = "white", 
                               "18" = "white", "20" = "white"), na.value = "white") +  
  coord_fixed() +  
  labs(fill = "Treatment") +
  theme_minimal() +
  theme(
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    panel.grid = element_blank()
  )
```




We offer an optimization strategy for a design problem, which we can improving ED and NB during optimizing statistic criteria for a design, and avoid unwanted clustering and self-adjacency on the resulting design.In this algorithm, we use A-criteria to evaluate the efficiency of a design. Before the algorithm, we randomly generate a design as an initial design, and calculate the A-criteria as initial value. We update design by selecting a better among its neighbours. The neighbours are pair-wise permutations of a design. Typically, we select a neighbour from all pairwise permutations of a design for iteration, but this does not ensure ED and NB. To ensure ED and NB during optimization, we add some constraints when generating the pairwise permutations, only maintain or better properties are accepted. By filtering design with bad ED and NB, we optimize the statistic criteria such as A-value of the design.

In the @sec-bg, we introduced how to model row-column designs by linear mixed, introduced the methods for calculating various statistics and the meaning behind them, and provided relevant mathematical proofs. In the @sec-methods, we outlined the relevant assumptions made for row-column designs. We introduced three search algorithmsâ€”random search and two cooling schedules for simulated annealingâ€”providing detailed descriptions of their steps and discussing their convergence properties. In the @sec-results, we first provide details of our simulation set-up,  presenting specific results with various figures, analyse the performance of different algorithms, and made comparisons among them. In the @sec-discuss, we outline our limitations and discussed some potential future directions.

